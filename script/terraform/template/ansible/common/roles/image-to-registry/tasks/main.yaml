#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

    - name: setup port forwarding
      shell:
        cmd: |
          nohup ssh -p {{ ansible_port | default(22) }} {{ ansible_user }}@{{ ansible_host }} -i {{ ansible_private_key_file }} -fNL {{ local_registry_url }}:{{ k8s_remote_registry_url }} > /dev/null 2>&1 &
          disown
        executable: /bin/bash
      delegate_to: localhost
      when: not (k8s_enable_csp_registry | bool)
      become: false

    - name: create AWS ECR namespaces
      shell: 
        cmd: "AWS_PAGER= aws ecr create-repository --region {{ k8s_remote_registry_url.split('.')[3] }} --repository-name {{ k8s_remote_registry_url.split('/')[1:] | join('/') }}/{{ item.key.split(':')[0] | basename }}"
        executable: /bin/bash
      when:
      - (k8s_enable_csp_registry | bool)
      - (".amazonaws.com" in k8s_remote_registry_url)
      with_dict: "{{ wl_docker_images }}"
      delegate_to: localhost
      ignore_errors: true

    - name: inspect local images
      command: "docker image inspect {{ item.key }}"
      register: inspect_l
      become: true
      with_dict: "{{ wl_docker_images }}"
      delegate_to: localhost
      ignore_errors: true

    - name: copy daemon images to registry
      shell:
        cmd: |
          skopeo copy {{ skopeo_options | default('') }} --dest-tls-verify=false docker-daemon:{{ item.item.key }} docker://{{ k8s_enable_csp_registry | bool | ternary(k8s_remote_registry_url,local_registry_url) }}/{{ item.item.key | basename }}
        executable: /bin/bash
      register: copy_result
      until: copy_result.rc == 0
      retries: 10
      delay: 5
      when: item.rc == 0
      loop: "{{ inspect_l.results }}"
      delegate_to: localhost
      become: yes

    - name: copy registry images to registry
      shell:
        cmd: |
          skopeo copy {{ skopeo_options | default('') }} --src-tls-verify={{ item.item.value }} --dest-tls-verify=false docker://{{ item.item.key }} docker://{{ k8s_enable_csp_registry | bool | ternary(k8s_remote_registry_url,local_registry_url) }}/{{ item.item.key | basename }}
        executable: /bin/bash
      register: copy_result
      until: copy_result.rc == 0
      retries: 10
      delay: 5
      when: item.rc != 0
      loop: "{{ inspect_l.results }}"
      delegate_to: localhost
      become: yes

    - name: inspect remote images
      command: "skopeo inspect {{ skopeo_options | default('') }} --tls-verify={{ item.item.value }} docker://{{ item.item.key }}"
      register: inspect_r
      become: true
      when: item.rc != 0
      loop: "{{ inspect_l.results }}"
      delegate_to: localhost
      ignore_errors: true

    - name: append build_commit_id and build_branch to workload-config.yaml
      blockinfile:
        path: "{{ wl_logs_dir }}/workload-config.yaml"
        marker: "# {mark} BUILD CONFIG"
        content: |
          build_commit_id: "{{ image_labels | selectattr('key', '==', 'BUILD_COMMIT_ID') | map(attribute='value') | unique | join(',') }}"
          build_branch: "{{ image_labels | selectattr('key', '==', 'BUILD_BRANCH') | map(attribute='value') | unique | join(',') }}"
      delegate_to: localhost
      become: false
      vars:
        image_labels: "{{ inspect_l.results | map(attribute='stdout') | map('from_json') | flatten | map(attribute='Config') | map('default',[],true) | map(attribute='Labels') | union(inspect_r.results | default([]) | map(attribute='stdout') | map('default','[]',true) | map('from_json') | flatten | map(attribute='Labels')) | map('default',{},true) | map('dict2items') | flatten }}"
      ignore_errors: true

    - name: cancel port forwarding
      shell:
        cmd: |
          ssh -p {{ ansible_port | default(22) }} {{ ansible_user }}@{{ ansible_host }} -i {{ ansible_private_key_file }} -O cancel -L {{ local_registry_url }}:{{ k8s_remote_registry_url }} > /dev/null 2>&1
        executable: /bin/bash
      delegate_to: localhost
      when: not (k8s_enable_csp_registry | bool)
      become: false

