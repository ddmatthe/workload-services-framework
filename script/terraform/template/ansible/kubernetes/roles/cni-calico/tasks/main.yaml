#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- name: Install calicoctl as a Kubernetes pod
  shell: "kubectl create -f {{ k8s_calicoctl_rep }}"

- name: Add calicoctl alias
  lineinfile:
    path=/home/{{ ansible_user }}/.bashrc
    line='alias calicoctl="kubectl exec -i -n kube-system calicoctl -- /calicoctl"'
    state=present
    insertafter=EOF

- name: Download calico.yaml to local
  delegate_to: localhost
  get_url:
    url: "{{ k8s_calico_vxlan_repo if ( k8s_calico_encapsulation | lower == 'vxlan' ) else k8s_calico_ipinip_repo }}"
    dest: "/tmp/{{ wl_namespace }}-calico.yaml"
    mode: +rx
  register: getrc
  until: getrc is success
  retries: 10
  delay: 5

- name: Replace calico.yaml with custom cidr
  delegate_to: localhost
  blockinfile:
    path: "/tmp/{{ wl_namespace }}-calico.yaml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK cidr"
    state: present
    insertbefore: '# - name: CALICO_IPV4POOL_CIDR'
    block: "{{ insert_cidr_lines | indent(width=12, first=True) }}"
  vars:
    insert_cidr_lines: "- name: CALICO_IPV4POOL_CIDR\n  value: {{ k8s_pod_cidr }}"

- name: Replace calico.yaml with IP detection
  delegate_to: localhost
  blockinfile:
    path: "/tmp/{{ wl_namespace }}-calico.yaml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK ip detection"
    state: present
    insertbefore: '# - name: CALICO_IPV4POOL_CIDR'
    block: "{{ ip_detection_lines | indent(width=12, first=True) }}"
  when: k8s_calico_iface != ''
  vars:
    ip_detection_lines: "- name: IP_AUTODETECTION_METHOD\n  value: 'interface={{ k8s_calico_iface }}'"

- name: Replace calico.yaml CrossSubnet with Always if vxlan enabled
  delegate_to: localhost
  replace:
    path: "/tmp/{{ wl_namespace }}-calico.yaml"
    regexp: '(\s+)value: "CrossSubnet"(\s+.*)?$'
    replace: '\1value: "Always"\2'
  when: (k8s_calico_encapsulation | lower) == 'vxlan'

- name: Copy replaced calico.yaml to remote
  ansible.builtin.copy:
    src: "/tmp/{{ wl_namespace }}-calico.yaml"
    dest: /tmp/{{ wl_namespace }}-calico.yaml

- name: Install calico.yaml
  shell: "kubectl create -f /tmp/{{ wl_namespace }}-calico.yaml"

- name: Cleanup remote calico.yaml
  file:
    path: "/tmp/{{ wl_namespace }}-calico.yaml"
    state: absent
  ignore_errors: true
  async: 30
  poll: 0

- name: Wait for calico ready
  shell: |
    timeout 300s bash -c "while ! kubectl wait --namespace=kube-system pod --for=condition=Ready -l k8s-app=calico-node --timeout=30s; do sleep 1s; done"
