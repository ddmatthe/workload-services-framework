#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
- name: create name space
  shell: kubectl create namespace {{ wl_namespace }} --dry-run=client -o yaml | kubectl apply -f -

- name: Add label to enable sidecar injection
  shell: kubectl label namespace {{ wl_namespace }} istio-injection=enabled --overwrite

- name: restart istio egress gateway
  shell: "kubectl rollout restart deployment -l istio=egressgateway -n istio-system"

- name: Wait for istio egress gateway ready
  shell: |
    kubectl wait --namespace=istio-system pod --for=condition=Ready -l istio=egressgateway --timeout=6s
  register: wait_gw_ready
  retries: 200
  delay: 3
  until: wait_gw_ready.rc == 0


- name: restart nh-server
  shell: "kubectl rollout restart deployment -l app=nighthawk-server -n istio-workload-nighthawk-server"

- name: Wait for nighthawk-server ready
  shell: |
    kubectl wait --namespace=istio-workload-nighthawk-server pod --for=condition=Ready -l app=nighthawk-server --timeout=6s
  register: wait_server_ready
  retries: 200
  delay: 3
  until: wait_server_ready.rc == 0

- name: Create ImagePullSecret
  include_role:
    name: docker_auth
  vars:
    namespace: "{{ wl_namespace }}"

- name: Customize deployment yaml for CNI
  include_role:
    name: "cni-{{ k8s_cni }}"
    tasks_from: customize-deployment.yaml
  when: ((role_path + '/../cni-' + k8s_cni + '/tasks/customize-deployment.yaml') is exists)

- name: create deployment
  command: "kubectl create --namespace {{ wl_namespace }} -f /tmp/{{ wl_namespace }}-k8s-script.yaml"

- block:

    - name: wait for scheduling
      shell: "timeout {{ timeout[1] | default(timeout[0]) }}s bash -c 'until kubectl --namespace={{ wl_namespace }} wait pod --all --for=condition=Ready --field-selector=status.phase!=Succeeded --timeout=1s 1>/dev/null 2>&1; do if kubectl --namespace={{ wl_namespace }} get pod -o json | grep -q Unschedulable; then exit 1; fi; done; exit 0'"
      vars:
        timeout: "{{ 'timeout' | extract(lookup('file', wl_logs_dir+'/workload-config.yaml')|from_yaml) | split(',') }}"

  rescue:

    - name: debugging
      include_role:
        name: debug

    - name: abort
      fail:
        msg: "abort due to scheduling failure"

- name: record timing
  shell:
    cmd: |
      echo "workload_itr{{ itr }}_start: \"$(date -Ins)\"" >> {{ wl_logs_dir }}/timing.yaml
    executable: /bin/bash
  delegate_to: localhost

- name: workload-execution
  include_tasks:
    file: process-traces-and-logs.yaml

- name: record timing
  shell:
    cmd: |
      echo "workload_itr{{ itr }}_end: \"$(date -Ins)\"" >> {{ wl_logs_dir }}/timing.yaml
    executable: /bin/bash
  delegate_to: localhost

- name: collect trace data
  include_role:
    name: trace
    tasks_from: collect
  when: wl_trace_modules is defined
  ignore_errors: yes

- name: print debug info
  include_role:
    name: debug

- name: delete namespace
  include_role:
    name: cleanup
    tasks_from: delete-namespace
  when: ((itr |int) < (run_stage_iterations | default(1) | int)) or ('cleanup' not in (stage | default('cleanup')))
