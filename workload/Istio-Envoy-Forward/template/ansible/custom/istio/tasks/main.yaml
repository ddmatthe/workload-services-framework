#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
- name: Get host ip of worker-0
  set_fact:
    worker_host_ip: '{{ hostvars["worker-0"]["private_ip"] }}'

- name: Get hostname of worker
  shell: "kubectl get node -owide|grep {{ worker_host_ip }}|awk '{print $1}'"
  register: worker_host_name

- name: Check if istio installed
  shell:
    cmd: "which istioctl"
  ignore_errors: true
  register: istio_installed

# curl -L https://istio.io/downloadIstio | sh -

- name: Download istio install script
  get_url:
    url: "{{ istio_install_dist_repo }}"
    dest: "/tmp/downloadIstio"
    mode: +rx
  when:
    - istio_installed.rc != 0

- name: Download istio into /tmp directory
  shell:
    cmd: "ISTIO_VERSION={{ istio_version_custom }} /tmp/downloadIstio"
  args:
    chdir: "/tmp"
  when:
    - istio_installed.rc != 0
  retries: 3
  delay: 10

- name: Create parent install directory if not exist
  become: true
  file:
    path: "{{ istio_install_parent_dir }}"
    state: directory
    mode: "0755"
  when:
    - istio_installed.rc != 0

- name: Copy to parent install directory
  become: true
  copy:
    src: "/tmp/istio-{{ istio_version_custom }}"
    dest: "{{ istio_install_parent_dir }}"
    remote_src: true
  when:
    - istio_installed.rc != 0

- name: Change install directory permissions recursively
  become: true
  file:
    path: "{{ istio_install_dir }}"
    state: directory
    mode: "0755"
    recurse: yes
  when:
    - istio_installed.rc != 0

- name: Link istioctl to /usr/local/bin
  become: true
  file:
    src: "{{ istio_install_dir }}/bin/istioctl"
    dest: "/usr/local/bin/istioctl"
    state: link
  when:
    - istio_installed.rc != 0

- name: Cleanup temp install resources
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/tmp/downloadIstio"
    - "/tmp/istio-{{ istio_version_custom }}"
  ignore_errors: true
  when:
    - istio_installed.rc != 0

- name: Istio precheck for pod install
  become: true
  become_user: "{{ ansible_user }}"
  shell:
    cmd: "istioctl x precheck"
  register: istio_precheck

- name: Generate isto config - create /tmp/istio-config.yaml
  shell: "echo '' > /tmp/istio-config.yaml"

- name: Generate isto config - write yaml to /tmp/istio-config.yaml
  blockinfile:
    path: /tmp/istio-config.yaml
    block: |
      apiVersion: install.istio.io/v1alpha1
      kind: IstioOperator
      metadata:
        name: installed-state
        namespace: istio-system
      spec:
        components:
          base:
            enabled: true
          cni:
            enabled: false
          egressGateways:
          - enabled: true
            name: istio-egressgateway
            k8s:
              nodeSelector:
                kubernetes.io/hostname: {{ worker_host_name.stdout }}
          ingressGateways:
          - enabled: false
            name: istio-ingressgateway
          istiodRemote:
            enabled: false
          pilot:
            enabled: true
            k8s:
              nodeSelector:
                kubernetes.io/hostname: {{ worker_host_name.stdout }}
        hub: docker.io/istio
        meshConfig:
          accessLogFile: /dev/stdout
          defaultConfig:
            proxyMetadata: {}
          enablePrometheusMerge: true
          outboundTrafficPolicy:
            mode: REGISTRY_ONLY
        profile: minimal
        tag: 1.18.0
        values:
          base:
            enableCRDTemplates: false
            validationURL: ""
          defaultRevision: ""
          gateways:
            istio-egressgateway:
              autoscaleEnabled: true
              env: {}
              name: istio-egressgateway
              secretVolumes:
              - mountPath: /etc/istio/egressgateway-certs
                name: egressgateway-certs
                secretName: istio-egressgateway-certs
              - mountPath: /etc/istio/egressgateway-ca-certs
                name: egressgateway-ca-certs
                secretName: istio-egressgateway-ca-certs
              type: ClusterIP
            istio-ingressgateway:
              autoscaleEnabled: true
              env: {}
              name: istio-ingressgateway
              secretVolumes:
              - mountPath: /etc/istio/ingressgateway-certs
                name: ingressgateway-certs
                secretName: istio-ingressgateway-certs
              - mountPath: /etc/istio/ingressgateway-ca-certs
                name: ingressgateway-ca-certs
                secretName: istio-ingressgateway-ca-certs
              type: LoadBalancer
          global:
            configValidation: true
            defaultNodeSelector: {}
            defaultPodDisruptionBudget:
              enabled: true
            defaultResources:
              requests:
                cpu: 10m
            imagePullPolicy: ""
            imagePullSecrets: []
            istioNamespace: istio-system
            istiod:
              enableAnalysis: false
            jwtPolicy: third-party-jwt
            logAsJson: false
            logging:
              level: default:info
            meshNetworks: {}
            mountMtlsCerts: false
            multiCluster:
              clusterName: ""
              enabled: false
            network: ""
            omitSidecarInjectorConfigMap: false
            oneNamespace: false
            operatorManageWebhooks: false
            pilotCertProvider: istiod
            priorityClassName: ""
            proxy:
              autoInject: enabled
              clusterDomain: cluster.local
              componentLogLevel: misc:error
              enableCoreDump: false
              excludeIPRanges: ""
              excludeInboundPorts: ""
              excludeOutboundPorts: ""
              image: proxyv2
              includeIPRanges: '*'
              logLevel: warning
              privileged: false
              readinessFailureThreshold: 30
              readinessInitialDelaySeconds: 1
              readinessPeriodSeconds: 2
              resources:
                limits:
                  cpu: 2000m
                  memory: 1024Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              statusPort: 15020
              tracer: zipkin
            proxy_init:
              image: proxyv2
            sds:
              token:
                aud: istio-ca
            sts:
              servicePort: 0
            tracer:
              datadog: {}
              lightstep: {}
              stackdriver: {}
              zipkin: {}
            useMCP: false
          istiodRemote:
            injectionURL: ""
          pilot:
            autoscaleEnabled: true
            autoscaleMax: 5
            autoscaleMin: 1
            configMap: true
            cpu:
              targetAverageUtilization: 80
            deploymentLabels: null
            enableProtocolSniffingForInbound: true
            enableProtocolSniffingForOutbound: true
            env: {}
            image: pilot
            keepaliveMaxServerConnectionAge: 30m
            nodeSelector: {}
            podLabels: {}
            replicaCount: 1
            traceSampling: 1
          telemetry:
            enabled: true
            v2:
              enabled: true
              metadataExchange:
                wasmEnabled: false
              prometheus:
                enabled: true
                wasmEnabled: false
              stackdriver:
                configOverride: {}
                enabled: false
                logging: false
                monitoring: false
                topology: false


- name: Install istio pods by specified profile name
  become: true
  become_user: "{{ ansible_user }}"
  shell:
    cmd: "istioctl install -f /tmp/istio-config.yaml -y"
  register: istio_install_res
  when:
    - istio_precheck.rc == 0

