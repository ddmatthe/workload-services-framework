## calicovpp_dsa_build_base
ARG RELEASE
#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
ARG OS_IMAGE=ubuntu
ARG OS_VER=20.04
FROM ${OS_IMAGE}:${OS_VER}

# Install necessary packages
RUN apt-get update \
 && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    curl build-essential autoconf automake ccache \
    debhelper dkms git libtool libapr1-dev dh-python \
    libconfuse-dev git-review exuberant-ctags cscope pkg-config \
    lcov chrpath autoconf libnuma-dev \
    python3-all python3-setuptools check \
    libffi-dev python3-ply libmbedtls-dev \
    cmake ninja-build uuid-dev python3-jsonschema python3-yaml \
    python3-venv \
    python3-dev \
    libnl-3-dev libnl-route-3-dev \
    enchant \
    python3-virtualenv \
    libssl-dev \
    libelf-dev \
    clang-11 clang-format-11 clang-format-10 \
    enchant-2 \
    libffi7 \
    libmnl0 \
    libiperf0 \
    iperf3 \
    libmnl-dev \
    wget

WORKDIR /

# Install golang
ARG GOLANG_VER="1.19.3"
ARG GOLANG_PACKAGE=https://go.dev/dl/go${GOLANG_VER}.linux-amd64.tar.gz
RUN wget ${GOLANG_PACKAGE} \
    && rm -rf /usr/local/go \
    && tar -C /usr/local -xzf go${GOLANG_VER}.linux-amd64.tar.gz \
    && rm -rf go${GOLANG_VER}.linux-amd64.tar.gz

ENV PATH=$PATH:/usr/local/go/bin

# Calico VPP dirs
ARG CALICOVPP_DIR=/vpp-dataplane
ARG CALICOVPP_AGENT_DIR=${CALICOVPP_DIR}/calico-vpp-agent
ARG CALICOVPP_MANAGER_DIR=${CALICOVPP_DIR}/vpp-manager

# Clone vpp-dataplane
ARG CALICOVPP_VER="v3.23.0"
ARG CALICOVPP_REPO=https://github.com/projectcalico/vpp-dataplane.git
RUN git clone -b release/${CALICOVPP_VER} ${CALICOVPP_REPO} ${CALICOVPP_DIR}

# DSA has not been supported by VPP yet, change below code to avoid Calico VPP downloading default VPP code
RUN sed -i "3a exit 0" ${CALICOVPP_DIR}/vpplink/binapi/vpp_clone_current.sh

# Download vpp code from VPP repo and add patch
ARG VPP_REPO=https://github.com/FDio/vpp.git
ARG VPP_DIR=${CALICOVPP_MANAGER_DIR}/vpp_build/
COPY ./patch/vpp.patch /
RUN git clone ${VPP_REPO}  ${VPP_DIR} && \
    cp /vpp.patch ${VPP_DIR} && \
    cd ${VPP_DIR} && \
    git reset --hard 7911f29c518c6b2a678e13874f7f16eba03dab75 && \
    git apply vpp.patch

# DSA has not been supported by Calico VPP yet, hardcode to use DSA for memif master
RUN sed -i "s/  if (args->use_dma)/  if (args->is_master)/g" ${CALICOVPP_MANAGER_DIR}/vpp_build/src/plugins/memif/memif.c

# Build calicovpp agent bin
RUN cd ${CALICOVPP_AGENT_DIR} && \
    GOOS=linux && \
    go build -o ./cmd/calico-vpp-agent ./cmd && \
    go build -o ./cmd/felix-api-proxy ./cmd/api-proxy && \
    go build -o ./cmd/debug ./cmd/debug-state && \
    go build -o ./dep/gobgp $(go list -f "{{.Dir}}" -m github.com/osrg/gobgp)/cmd/gobgp/

# Build calicovpp vpp bin
RUN cd ${CALICOVPP_MANAGER_DIR}/vpp_build && \
    make build-release && \
    rm -f ./build-root/*.deb ./build-root/*.changes ./build-root/*.buildinfo && \
    make pkg-deb && \
    cd ${CALICOVPP_MANAGER_DIR} && \
    GOOS=linux go build -o images/ubuntu/vpp-manager

# Build l3fwd bin
ARG DEBIAN_FRONTEND=noninteractive
ARG TZ=Etc/UTC
RUN cd ${CALICOVPP_MANAGER_DIR}/vpp_build && \
    sh -c '/bin/echo -e "y\ny" | ./extras/vagrant/build.sh' && \
    sh -c '/bin/echo -e "y\n" | make install-dep' && \
    cd ${CALICOVPP_MANAGER_DIR}/vpp_build/build-root && \
    mkdir -p ./build-vpp-native/vpp/lib/x86_64-linux-gnu/vpp_plugin/ && \
    make V=0 PLATFORM=vpp TAG=vpp sample-plugin-install && \
    cp ./install-vpp-native/sample-plugin/lib/vpp_plugins/sample_plugin.so /
